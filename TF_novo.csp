QL = 2 -- Quantidade de Leitores
QE = 2 -- Quantidade de Escritores

IDL = {1 .. QL}
IDE = {1 .. QE}

Valor = IDE

-- LEITORES ( conjunto de LEITORES)
	
	-- Channels do Leitor
	channel leitorEntra,leitorSai: IDL
	channel leitorLendo:IDL.Valor

	-- Define o que cada leitor vai fazer
	Leitor(n) = leitorEntra!n -> leitorLendo.n?v -> leitorSai!n -> Leitor(n)

	-- Colocar todos os leitores juntos para executar
	Leitores = ||| n:IDL @ Leitor(n)  

	-- Define as ações que cada leitor pode fazer, <-- OBS NÃO ENTENDI O VALOR
	AcoesLeitores = { leitorEntra.n, leitorLendo.n.v, leitorSai.n | n: IDL , v: Valor}


-- Escritores ( conjunto de escritor)

	-- Channels do Escritor
	channel escritorEntra,escritorSai: IDE
	channel escritorEscreve:IDE.Valor

	-- Define o que cada Escritor pode fazer
	Escritor(n) = escritorEntra!n -> escritorEscreve.n!n-> escritorSai!n -> Escritor(n)

	-- Coloca N escritores em parelelo
	Escritores = ||| n:IDE @ Escritor(n)  

	-- Define as ações de cada Escritor
	AcoesEscritores = { escritorEntra.n, escritorEscreve.n.v, escritorSai.n | n: IDE , v: Valor}

	
-- DADO ( pensando como se fosse o trilho )
Dado = D(1)
D(v) = 		leitorLendo?l!v -> D(v)    -- Pergunta se o tem algum leitor lendo 
		[]  escritorEscreve?e?nv -> D(nv) -- Pergunta se tem um escritor lendo
-- RODANDO EM PARALELO

LE = (Dado ||| Controle) [| union(AcoesEscritores,AcoesLeitores)|] (Leitores ||| Escritores)


-- Realiza o controle , esse é o juiz 

-- Starvation
-- Como o escritor só pode entrar quando não tem ninguem no controlador ( s == 0 ) e podem ficar entrando e saindo leitores
-- com s != 0, pode ocorrer o caso de que o controlador nunca fique vázio ( s == 0), pois ao entrar um leitor somente outro
-- leitor poderá entrar.
-- Exemplo: Um leitor1 entra ( c(1) )
--			Um leitor2 entra ( c(2) )
--			Um Leitor1 sai   ( c(1) )
--			Um leitor1 entra ( c(2) )
--			Um Leitor2 sai   ( c(1) )
--			Um leitor2 entra ( c(2) )
--			... Assim o controlador nunca chegará em zero, portanto nenhum escritor vai entrar, caracterizando o caso de Starvation.


Controle = C(0)												-- Inicia o controlador com NADA DENTRO
C(s) = 
    if s==0													-- Se não tem ninguem lá
    then ( leitorEntra?l -> C(1)          					-- Entra um leitor, então diz que entrou e vira C(1) com 1 leitor dentro
	       []
  		   escritorEntra?e -> escritorSai.e -> C(s) )       -- Entra um Escritor, então ele tem que fazer o processo e sair e retornar C(0)
    else if s<QL											-- Se ainda pode entrar leitores, ( ou seja não entrou todos)
	     then ( leitorEntra?l -> C(s+1)						-- Pode entrar mais um leitor e então vira C(s+1) ou seja adiciona mais um leitor
		        []											
		        leitorSai?l -> C(s-1)  )					-- Ou então o leitor sai, e tiramos ele de dentro do controlador C(s-1)
		 else leitorSai?l -> C(s-1) 						-- Se não tem mais leitor para entrar, então só pode estar saindo leitor C(s-1)
		 
		 
-- *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

-- Questão 2


-- Starvation
-- O mesmo problema do controle ocorre aqui, mas o caso é inverso, pode um leitor ficar na espera e nunca acessar o controle.

Controle2 = CE(0,0)											-- Inicia o controlador com NADA DENTRO C(numero de leitores,numero de escritores)
CE(s,y) = 
    if ((y==0) and (s==0))									-- Se não tem nenhum escritor lá dentro e nenhum leitor
    then ( escritorEntra?e -> CE(0,1)    			    		-- Entra um Escritor C(s,e+1)
	       []
  		   leitorEntra?l -> CE(1,0) )                       	-- Entra um leitor, então diz que entrou e vira C(s+1,e) com 1 leitor dentro
    else if ((y==0) and (s < QL))							-- Se não tem escritor , mas tem leitor
	then ( escritorEntra?e -> CE(s,1)    			    		-- Entra um Escritor C(s,e+1)
	       []
  		   leitorEntra?l -> CE(s+1,0)                       	-- Entra um leitor, então diz que entrou e vira C(s+1,e) com 1 leitor dentro		
		   []
		   leitorSai?l -> CE(s-1,0))                     		-- Sai um leitor
	else if (y < QE and s==0)								-- Tem Escritor e não tem leitor										
	then ( escritorEntra?e -> CE(0,y+1)					    	-- Entra um novo escritor
		   []											
		   escritorSai?e -> CE(0,y-1)  )						-- Sai um escritor
	else if (y < QE and s < QL)						        -- Tem Escritor e Leitor
	then ( escritorEntra?e -> CE(s,y+1)					    	-- só escritores podem entrar
		   []
		   leitorSai?l -> CE(s-1,y) )							-- Um leitor só pode sair
    else if(y >= QE) 										-- Ainda pode sair escritores
	then (escritorSai?l -> CE(s,y-1)) 				        	-- Sai escritor
	else leitorSai?l -> CE(s-1,y)				 			-- Ainda tem Leitores , sai leitor
					 
LE2 = (Dado ||| Controle2) [| union(AcoesEscritores,AcoesLeitores)|] (Leitores ||| Escritores)
		 
		 


		 