QL = 2 -- Quantidade de Leitores
QE = 2 -- Quantidade de Escritores

IDL = {1 .. QL}
IDE = {1 .. QE}

-- ??????????????????????o que é valor?
Valor = IDE

-- LEITORES ( conjunto de LEITORES)
	
	-- Channels do Leitor
	channel leitorEntra,leitorSai: IDL
	channel leitorLendo:IDL.Valor

	-- Define o que cada leitor vai fazer
	Leitor(n) = leitorEntra!n -> leitorLendo.n?v -> leitorSai!n -> Leitor(n)

	-- Colocar todos os leitores juntos para executar
	Leitores = ||| n:IDL @ Leitor(n)  

	-- Define as ações que cada leitor pode fazer, <-- OBS NÃO ENTENDI O VALOR
	AcoesLeitores = { leitorEntra.n, leitorLendo.n.v, leitorSai.n | n: IDL , v: Valor}


-- Escritores ( conjunto de escritor)

	-- Channels do Escritor
	channel escritorEntra,escritorSai: IDE
	channel escritorEscreve:IDE.Valor

	-- Define o que cada Escritor pode fazer
	Escritor(n) = escritorEntra!n -> escritorEscreve.n!n-> escritorSai!n -> Escritor(n)

	-- Coloca N escritores em parelelo
	Escritores = ||| n:IDE @ Escritor(n)  

	-- Define as ações de cada Escritor
	AcoesEscritores = { escritorEntra.n, escritorEscreve.n.v, escritorSai.n | n: IDE , v: Valor}

	
-- DADO ( pensando como se fosse o trilho )
Dado = D(1)
D(v) = 		leitorLendo?l!v -> D(v)    -- Pergunta se o tem algum leitor lendo  ( ???? o que é l ??)
		[]  escritorEscreve?e?nv -> D(nv) -- Pergunta se tem um escritor lendo ( ??? o que é o e ??)
		
-- RODANDO EM PARALELO

LE = (Dado ||| Controle) [| union(AcoesEscritores,AcoesLeitores)|] (Leitores ||| Escritores)


-- Realiza o controle , esse é o juiz 

-- Tem um problema o escritor só entra se tem 0 coisas dentro do controlador, resumindo ele pode nunca entrar
-- por que os leitores podem ficar entrando e saindo toda a hora!

Controle = C(0)												-- Inicia o controlador com NADA DENTRO
C(s) = 
    if s==0													-- Se não tem ninguem lá
    then ( leitorEntra?l -> C(1)          					-- Entra um leitor, então diz que entrou e vira C(1) com 1 leitor dentro
	       []
  		   escritorEntra?e -> escritorSai.e -> C(s) )       -- Entra um Escritor, então ele tem que fazer o processo e sair e retornar C(0)
    else if s<QL											-- Se ainda pode entrar leitores, ( ou seja não entrou todos)
	     then ( leitorEntra?l -> C(s+1)						-- Pode entrar mais um leitor e então vira C(s+1) ou seja adiciona mais um leitor
		        []											
		        leitorSai?l -> C(s-1)  )					-- Ou então o leitor sai, e tiramos ele de dentro do controlador C(s-1)
		 else leitorSai?l -> C(s-1) 						-- Se não tem mais leitor para entrar, então só pode estar saindo leitor C(s-1)
		 
		 
		 
-- *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

-- Tentativa para correção da questão dois!

Controle2 = CE(0,0)											-- Inicia o controlador com NADA DENTRO C(numero de leitores,numero de escritores)
CE(s,e) = 
    if (e==0)										        -- Se não tem nenhum escritor lá dentro , tanto escritor quanto leitor pode entrar
    then ( escritorEntra?e -> CE(s,e + 1) )   			    	-- Entra um Escritor C(s,e+1)
	       []
  		   leitorEntra?l -> CE(s+1,e)          		     		-- Entra um leitor, então diz que entrou e vira C(s+1,e) com 1 leitor dentro
	else if (e < QE and s==0)								-- tem escritores e não tem leitores , não pode entrar leitor, só escritor										
	     then ( escritorEntra?e -> CE(0,e+1)					-- pode entrar um novo escritor
		        []											
		        escritorSai?e -> CE(0,e-1)  )					--pode sair um escritor
		 else if (e < QE and s < QL)						-- Tem escritor e tem leitor, então só pode entrar ou sair um escritor, e os leitores só podem sair
		 then ( escritorEntra?e -> CE(0,e+1)					-- só escritores podem entrar
				[]
				escritorSai?e -> CE(0,e-1)  					--pode sair um escritor
				[]
				leitorSai?l -> CE(s-1,e) )						-- Um leitor só pode sair
			else if( e > QE )								-- se não tem mais escrtor para entrar, então eles só podem sair
				 then (escritorSai?e -> CE(s,e-1)) 		    	-- só sai escritores
			     else leitorSai?l -> CE(s-1,e) 				-- Senão só leitor pode sair
					 
					 
LE2 = (Dado ||| Controle2) [| union(AcoesEscritores,AcoesLeitores)|] (Leitores ||| Escritores)
		 
		 


		 