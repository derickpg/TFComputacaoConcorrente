--------------------------------------------------------------------------------
-- Trabalho Modelos para Computacao Concorrente
-- Leitores e Escritores (problema 1) - modelo CSP
-- Alunos: Derick Garcez
--         Vinicius Azevedo
-- Escola Politecnica - PUCRS
-- Desenvolvido a partir do exemplo disponibilizado pelo professor
--------------------------------------------------------------------------------

-- Quantidade de leitores (QL) e escritores (QE)
QL = 2
QE = 2

-- Indice de leitores e escritores
IDL = {1 .. QL}
IDE = {1 .. QE}

Valor = IDE

-- LEITORES ( conjunto de LEITORES)

	-- Channels do Leitor
	channel leitorEntra,leitorSai: IDL
	channel leitorLendo:IDL.Valor

	-- Define o que cada leitor vai fazer
	Leitor(n) = leitorEntra!n -> leitorLendo.n?v -> leitorSai!n -> Leitor(n)

	-- Colocar todos os leitores juntos para executar
	Leitores = ||| n:IDL @ Leitor(n)

	-- Define as ações que cada leitor pode fazer
	AcoesLeitores = { leitorEntra.n, leitorLendo.n.v, leitorSai.n | n: IDL , v: Valor}


-- Escritores ( conjunto de escritor)

	-- Channels do Escritor
	channel escritorEntra,escritorSai: IDE
	channel escritorEscreve:IDE.Valor

	-- Define o que cada Escritor pode fazer
	Escritor(n) = escritorEntra!n -> escritorEscreve.n!n-> escritorSai!n -> Escritor(n)

	-- Coloca N escritores em parelelo
	Escritores = ||| n:IDE @ Escritor(n)

	-- Define as ações de cada Escritor
	AcoesEscritores = { escritorEntra.n, escritorEscreve.n.v, escritorSai.n | n: IDE , v: Valor}


-- DADO ( pensando como se fosse o trilho )
Dado = D(1)
D(v) = 		leitorLendo?l!v -> D(v)     -- Pergunta se tem um leitor lendo
		[]  escritorEscreve?e?nv -> D(nv) -- Pergunta se tem um escritor lendo
-- RODANDO EM PARALELO

RW = (Dado ||| Controle) [| union(AcoesEscritores,AcoesLeitores)|] (Leitores ||| Escritores)

-- Realiza o controle , esse é o juiz

Controle = C(0)																					-- Inicia o controlador com NADA DENTRO
C(s) =
    if s==0																							-- Se não tem ninguem lá
    then ( leitorEntra?l -> C(1) 			         					-- Entra um leitor, então diz que entrou e vira C(1) com 1 leitor dentro
	       []
  		   escritorEntra?e -> escritorSai.e -> C(s) )     -- Ou Entra um Escritor, então ele tem que fazer o processo e sair e retornar C(0)
    else if s<QL																				-- Se ainda pode entrar leitores, ( ou seja não entrou todos)
	     then ( leitorEntra?l -> C(s+1)										-- Pode entrar mais um leitor e então vira C(s+1) ou seja adiciona mais um leitor
		        []
		        leitorSai?l -> C(s-1) )											-- Ou então o leitor sai, e tiramos ele de dentro do controlador C(s-1)
		 else leitorSai?l -> C(s-1) 											  -- Se não tem mais leitor para entrar, então só pode estar saindo leitor C(s-1)

--------------------------------------------------------------------------------
-- Questao Starvation
-- Como o escritor só pode entrar quando não tem ninguem no controlador ( s == 0 ) e podem ficar entrando e saindo leitores
-- com s != 0, pode ocorrer o caso de que o controlador nunca fique vázio ( s == 0), pois ao entrar um leitor somente outro
-- leitor poderá entrar.
-- Exemplo: Um leitor1 entra ( c(1) )
--			Um leitor2 entra ( c(2) )
--			Um Leitor1 sai   ( c(1) )
--			Um leitor1 entra ( c(2) )
--			Um Leitor2 sai   ( c(1) )
--			Um leitor2 entra ( c(2) )
--			... Assim o controlador nunca chegará em zero, portanto nenhum escritor vai entrar, caracterizando o caso de Starvation.
--------------------------------------------------------------------------------
